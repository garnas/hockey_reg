security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_team_provider:
            entity:
                class: App\Entity\Team
                property: teamname
        app_organizer_provider:
            entity:
                class: App\Entity\Organizer
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        organizer:
            pattern: ^/organizer
            provider: app_organizer_provider
            form_login:
                login_path: app_orga_login
                check_path: app_orga_login
                enable_csrf: false
                default_target_path: app_orga_teams
            logout:
                path: app_logout
            context: my_context

        team:
            lazy: true
            provider: app_team_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: false
                default_target_path: app_team_my
            logout:
                path: app_logout
            context: my_context
            switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { route: 'app_team_my', roles: [ROLE_TEAM, ROLE_ORGANIZER] }
        - { route: 'app_team_remove_player', roles: [ROLE_TEAM, ROLE_ORGANIZER] }
        - { route: 'app_team_toggle_captain', roles: [ROLE_TEAM, ROLE_ORGANIZER] }
        - { route: 'app_team_edit', roles: [ ROLE_TEAM, ROLE_ORGANIZER ] }
        - { route: 'app_orga_remove_team', roles: [ ROLE_ORGANIZER ] }
        - { route: 'app_orga_teams', roles: [ ROLE_ORGANIZER ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
